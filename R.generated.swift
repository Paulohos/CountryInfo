//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CountryTableViewCell`.
    static let countryTableViewCell = _R.nib._CountryTableViewCell()
    
    /// `UINib(name: "CountryTableViewCell", in: bundle)`
    static func countryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.countryTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainInterface`.
    static let mainInterface = _R.storyboard.mainInterface()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainInterface", bundle: ...)`
    static func mainInterface(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainInterface)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CountryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CountryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CountryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CountryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try mainInterface.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainInterface: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailsCountryViewController = StoryboardViewControllerResource<DetailsCountryViewController>(identifier: "DetailsCountryViewController")
      let homeTableViewController = StoryboardViewControllerResource<HomeTableViewController>(identifier: "HomeTableViewController")
      let name = "MainInterface"
      
      func detailsCountryViewController(_: Void = ()) -> DetailsCountryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailsCountryViewController)
      }
      
      func homeTableViewController(_: Void = ()) -> HomeTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeTableViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.mainInterface().homeTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeTableViewController' could not be loaded from storyboard 'MainInterface' as 'HomeTableViewController'.") }
        if _R.storyboard.mainInterface().detailsCountryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailsCountryViewController' could not be loaded from storyboard 'MainInterface' as 'DetailsCountryViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
